source variables

if [ "$serverType" == "Webserver" ]
then
if [ "$serverGeneration" == "Base" ]
then


# system
touch /root/TODO
mkdir /root/secrets
touch /root/secrets/ws0Secrets.txt

# apt
apt-get update
apt-get upgrade -y
apt-get install python3-pip supervisor nginx opendkim opendkim-tools vnstat fail2ban rabbitmq-server apt-transport-https unzip jailkit -y

# pip3
pip3 install --upgrade pip
pip3 install virtualenv

# system
yes "" | adduser ubuntu

# jail
mkdir -p $jailDir
mkdir -p $jailDir/VPN

for program in $programsToCopy
do
  cp --parents $program $jailDir
  cp --parents $(ldd $program | grep -v dynamic | cut -d " " -f 3 | sed "s/://" | sort | uniq) $jailDir
done

cp --parents /lib64/ld-linux-x86-64.so.2 $jailDir

yes "" | adduser vpnservers --disabled-password

mkdir -p /home/vpnservers/.ssh
touch /home/vpnservers/.ssh/authorized_keys

groupadd jailed
adduser vpnservers jailed

# sshd
ssh-keygen -t ed25519 -a 256 -f /root/secrets/${serverHostname} -N ""
cat /root/secrets/${serverHostname}.pub >> /home/ubuntu/.ssh/authorized_keys
rm /root/secrets/${serverHostname}.pub

ssh-keygen -t ed25519 -a 256 -f /root/secrets/vpnservers -N ""
cat /root/secrets/vpnservers.pub >> /home/vpnservers/.ssh/authorized_keys
rm /root/secrets/vpnservers.pub

# TODO
echo -e " -  Copy '/root/secrets' directory to secured, separate drive.\nThe '${serverHostname}' file contains the private key needed to SSH\nback into the server.\n\n" >> /root/TODO

# postfix
debconf-set-selections <<< "postfix postfix/mailname string ${serverHostname}.${internalFQDN}"
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"

apt-get install postfix -y

# opendkim
adduser postfix opendkim

mkdir -p /etc/opendkim/keys
mkdir /etc/opendkim/keys/noreply.${publicFQDN}
mkdir /etc/opendkim/keys/fwd.${publicFQDN}
mkdir /etc/opendkim/keys/burn.${publicFQDN}
mkdir /var/spool/postfix/opendkim

opendkim-genkey -b 2048 -d noreply.${publicFQDN} -D /etc/opendkim/keys/noreply.${publicFQDN} -s noreply -v
opendkim-genkey -b 2048 -d fwd.${publicFQDN} -D /etc/opendkim/keys/fwd.${publicFQDN} -s fwd -v
opendkim-genkey -b 2048 -d burn.${publicFQDN} -D /etc/opendkim/keys/burn.${publicFQDN} -s burn -v

chown -R opendkim:opendkim /etc/opendkim
chmod go-rw /etc/opendkim/keys
chown opendkim:opendkim /etc/opendkim/keys/noreply.${publicFQDN}/noreply.private
chown opendkim:opendkim /etc/opendkim/keys/fwd.${publicFQDN}/fwd.private
chown opendkim:opendkim /etc/opendkim/keys/burn.${publicFQDN}/burn.private
chown opendkim:postfix /var/spool/postfix/opendkim

cp -R /etc/opendkim/keys /root/secrets/

# TODO
echo -e " -  Create DNS TXT records for the following keys:\n\n" >> /root/TODO
cat /etc/opendkim/keys/noreply.${publicFQDN}/noreply.txt >> /root/TODO
cat /etc/opendkim/keys/fwd.${publicFQDN}/fwd.txt >> /root/TODO
cat /etc/opendkim/keys/burn.${publicFQDN}/burn.txt >> /root/TODO

# postfix
touch /etc/postfix/virtual
postmap /etc/postfix/virtual

# dnscrypt
apt-get install dnscrypt-proxy -y
systemctl disable systemd-resolved

# systemctl
systemctl restart opendkim postfix

# system
cd /home/ubuntu

# virtualenv
virtualenv priveasyEnv
chown -R ubuntu:ubuntu priveasyEnv
source priveasyEnv/bin/activate

pip install django uwsgi psycopg2-binary celery django-environ django-kronos stripe twilio

deactivate

# django
git clone https://github.com/P5vc/WebserverBackend.git
cp -R WebserverBackend/* ./
rm -rf WebserverBackend

djangoSecretKey=$(gpg --armor --gen-random 2 64)
djangoSecretKey=${djangoSecretKey:0:64}
echo "$djangoSecretKey" >> /root/secrets/ws0Secrets.txt
echo "SECRET_KEY=${djangoSecretKey}" >> ./Priveasy/Priveasy/settings/.env

echo "DJANGO_SETTINGS_MODULE=Priveasy.settings.pro" >> /etc/environment
export DJANGO_SETTINGS_MODULE=Priveasy.settings.pro

dbPass=$(sed -n "1p" "/root/secrets/db0Secrets.txt")
dbHostname=$(sed -n "2p" "/root/secrets/db0Secrets.txt")
echo "DATABASE_PASSWORD=${dbPass}" >> ./Priveasy/Priveasy/settings/.env
echo "DATABASE_HOST=${dbHostname}.${internalFQDN}" >> ./Priveasy/Priveasy/settings/.env
echo "DATABASE_PORT=58762" >> ./Priveasy/Priveasy/settings/.env

echo "TWILIO_ACCOUNT_SID=" >> ./Priveasy/Priveasy/settings/.env
echo "TWILIO_AUTH_TOKEN=" >> ./Priveasy/Priveasy/settings/.env
echo "STRIPE_API_KEY=" >> ./Priveasy/Priveasy/settings/.env

echo -e "\n\n -  Insert the correct Twilio and Stripe keys in /home/ubuntu/Priveasy/Priveasy/settings/.env" >> /root/TODO

chown -R ubuntu:ubuntu Priveasy

ln -s /home/ubuntu/Priveasy/config/nginx.conf /etc/nginx/sites-enabled/Priveasy.conf

pythonVersion=$(ls /home/ubuntu/priveasyEnv/lib/)
sed "s/    def scheme(self):/    def scheme(self):\n        ### START OF MODIFIED LINES ###\n        if (self.get_host() in settings.HOST_SCHEME_ALWAYS_HTTPS):\n            return 'https'\n        ### END OF MODIFIED LINES ###/1" /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py > /tmp/request.py
mv /tmp/request.py /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py

source priveasyEnv/bin/activate

python -m pip install django[argon2]

cd /home/ubuntu/Priveasy

yes 'yes' | python manage.py collectstatic
python manage.py installtasks
python manage.py makemigrations
python manage.py migrate

deactivate

echo -e "\n\n -  Run 'source /home/ubuntu/priveasyEnv/bin/activate && python /home/ubuntu/Priveasy/manage.py createsuperuser',\nthen follow the steps to create a superuser account, and save the\ncredentials to the /root/ws0Secrets.txt file." >> /root/TODO
echo -e "\n\n -  Add the appropriate Twilio credentials to the /home/ubuntu/Priveasy/mainSite/.env file." >> /root/TODO

# Zcash
zcashEncKey=$(gpg --armor --gen-random 2 64)
zcashEncKey=${zcashEncKey:0:64}
echo "$zcashEncKey" >> /root/secrets/ws0Secrets.txt
echo "ZCASH_WALLET_ENCRYPTION_KEY=${zcashEncKey}" >> /home/ubuntu/Priveasy/Priveasy/settings/.env

cd /home/ubuntu
wget https://github.com/adityapk00/zecwallet-light-cli/releases/download/v${zcashCliVersion}/linux-zecwallet-cli-v${zcashCliVersion}.zip
unzip linux-zecwallet-cli-v${zcashCliVersion}.zip
rm linux-zecwallet-cli-v${zcashCliVersion}.zip
mv linux-zecwallet-cli-v${zcashCliVersion} Zcash
cd /home/ubuntu/Zcash
./zecwallet-cli encrypt $zcashEncKey
./zecwallet-cli save

# certbot
apt-get install software-properties-common
add-apt-repository universe
apt-get update
apt-get install certbot python3-certbot-nginx -y
echo -e "\n\n -  Run 'sudo certbot --nginx' and follow the prompts." >> /root/TODO

# ufw
ufw allow 22
ufw allow 80
ufw allow 443
ufw allow 58763
ufw allow 25
ufw allow 587
yes | ufw enable

# uwsgi
mkdir -p /var/log/uwsgi/
touch /var/log/uwsgi/uwsgi.log

# supervisor
mkdir -p /var/log/celery/
touch /var/log/celery/worker.log

# rabbitmq
systemctl enable rabbitmq-server

# tor
cd /var
mkdir tor
chown ubuntu:ubuntu tor
chmod 660 tor
cd /home/ubuntu
mkdir hiddenService
chmod 700 hiddenService

curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import && gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -

echo -e "\n\n -  Copy-over the appropriate key files to /home/ubuntu/hiddenService" >> /root/TODO

# openssl
yes "" | openssl req -x509 -nodes -days 1 -newkey rsa:2048 -keyout /etc/ssl/private/tempKey.key -out /etc/ssl/private/tempCert.crt

# TODO
echo -e "\n\n -  After you save the secrets directory to a separate\ndrive, run 'sudo ufw delete allow 22'.\nThis will now block the standard SSH port (as a\nnon-standard port will now be used by default)." >> /root/TODO
echo -e "\n\n -  REBOOT THE SERVER!!" >> /root/TODO


fi
fi
