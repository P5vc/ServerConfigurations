# apt
apt-get update
apt-get install opendkim opendkim-tools rabbitmq-server supervisor unzip -y


# postfix
debconf-set-selections <<< "postfix postfix/mailname string ${primaryFQDN}"
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"

apt-get install postfix -y

touch /etc/postfix/virtual
postmap /etc/postfix/virtual


# opendkim
adduser postfix opendkim

mkdir -p /etc/opendkim/keys
mkdir /etc/opendkim/keys/burn.${primaryFQDN}
mkdir /etc/opendkim/keys/fwd.${primaryFQDN}
mkdir /etc/opendkim/keys/noreply.${primaryFQDN}
mkdir /var/spool/postfix/opendkim

opendkim-genkey -b 2048 -d burn.${primaryFQDN} -D /etc/opendkim/keys/burn.${primaryFQDN} -s burn -v
opendkim-genkey -b 2048 -d fwd.${primaryFQDN} -D /etc/opendkim/keys/fwd.${primaryFQDN} -s fwd -v
opendkim-genkey -b 2048 -d noreply.${primaryFQDN} -D /etc/opendkim/keys/noreply.${primaryFQDN} -s noreply -v

chown -R opendkim:opendkim /etc/opendkim
chmod go-rw /etc/opendkim/keys

chown opendkim:postfix /var/spool/postfix/opendkim

cp -R /etc/opendkim/keys /root/${serverHostname}/

systemctl restart opendkim postfix


# tor
wget -O- https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --dearmor | tee /usr/share/keyrings/tor-archive-keyring.gpg >/dev/null


# pip3
pip3 install --upgrade pip
pip3 install virtualenv


# virtualenv
virtualenv /home/ubuntu/priveasyEnv
chown -R ubuntu:ubuntu /home/ubuntu/priveasyEnv
source /home/ubuntu/priveasyEnv/bin/activate

pip install celery cryptography django django-environ django[argon2] Pillow psycopg2-binary uwsgi

deactivate


# django
git clone https://github.com/P5vc/PriveasyWebserverBackend.git /home/ubuntu/priveasyBackend
srm -r /home/ubuntu/priveasyBackend/.git

djangoSecretKey=$(gpg --armor --gen-random 2 64)
djangoSecretKey=${djangoSecretKey:0:64}
echo "djangoSecretKey=${djangoSecretKey}" >> /root/${serverHostname}/secrets.txt
echo "SECRET_KEY=${djangoSecretKey}" >> /home/ubuntu/priveasyBackend/Priveasy/Priveasy/.env

adminConsoleURL="$(gpg --armor --gen-random 2 32 | tr -d /+=)/"
echo "adminConsoleURL=${adminConsoleURL}" >> /root/${serverHostname}/secrets.txt
echo "ADMIN_URL=${adminConsoleURL}" >> /home/ubuntu/priveasyBackend/Priveasy/Priveasy/.env

echo "DJANGO_SETTINGS_MODULE=Priveasy.settings" >> /etc/environment
export DJANGO_SETTINGS_MODULE=Priveasy.settings

chown -R ubuntu:ubuntu /home/ubuntu/priveasyBackend

ln -s /home/ubuntu/priveasyBackend/config/nginx.conf /etc/nginx/sites-enabled/Priveasy.conf


# Modify Django Library Files To Support Tor:
pythonVersion=$(ls /home/ubuntu/priveasyEnv/lib/)

sed "s/    def scheme(self):/    def scheme(self):\n        ### START OF MODIFIED LINES ###\n        if (self.get_host() in settings.HOST_SCHEME_ALWAYS_HTTPS):\n            return 'https'\n        ### END OF MODIFIED LINES ###/1" /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py > /tmp/request.py
mv /tmp/request.py /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py

sed "s/return self._reject(request, REASON_INSECURE_REFERER)/### START OF MODIFIED LINES ###\n                    if (referer.netloc not in settings.HOST_SCHEME_ALWAYS_HTTPS):\n                        return self._reject(request, REASON_INSECURE_REFERER)\n                    ### END OF MODIFIED LINES###/1" /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/middleware/csrf.py > /tmp/csrf.py
mv /tmp/csrf.py /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/middleware/csrf.py


# postgres
sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

apt-get update
apt-get install postgresql -y

priveasyuserPass=$(gpg --armor --gen-random 2 64)
priveasyuserPass=${priveasyuserPass:0:64}
echo "priveasyuserPostgresPassword=${priveasyuserPass}" >> /root/${serverHostname}/secrets.txt
echo "DATABASE_PASSWORD=${priveasyuserPass}" >> /home/ubuntu/priveasyBackend/Priveasy/Priveasy/.env

sudo -u postgres psql -c "CREATE DATABASE priveasydb;"
sudo -u postgres psql -c "CREATE USER priveasyuser WITH LOGIN PASSWORD '${priveasyuserPass}';"
sudo -u postgres psql -c "ALTER ROLE priveasyuser SET client_encoding TO 'utf8';"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE priveasydb TO priveasyuser;"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO priveasyuser;"


# openssl
yes "" | openssl req -x509 -nodes -days 1 -newkey rsa:2048 -keyout /etc/ssl/private/tempKey.key -out /etc/ssl/private/tempCert.crt || true


# certbot
snap install core; sudo snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot
certbot --nginx


# uwsgi
mkdir -p /var/log/uwsgi/
touch /var/log/uwsgi/uwsgi.log


# supervisor
mkdir -p /var/log/celery/
touch /var/log/celery/worker.log


# rabbitmq
systemctl enable rabbitmq-server


# tor
mkdir /var/tor
chown ubuntu:ubuntu /var/tor
chmod 660 /var/tor
mkdir /home/ubuntu/hiddenService
chmod 700 /home/ubuntu/hiddenService


# Zcash
zcashEncKey=$(gpg --armor --gen-random 2 64)
zcashEncKey=${zcashEncKey:0:64}
echo "zcashWalletEncryptionKey=${zcashEncKey}" >> /root/${serverHostname}/secrets.txt
echo "ZCASH_WALLET_ENCRYPTION_KEY=${zcashEncKey}" >> /home/ubuntu/priveasyBackend/Priveasy/Priveasy/.env

echo -e "\n\nIn order to properly configure this server, the latest version\nof zecwallet-light-cli must be known (https://github.com/adityapk00/zecwallet-light-cli/releases).\nPlease enter the current version number (i.e. 1.7.7).\n\nVersion Number: "
read zcashCliVersion </dev/tty

wget https://github.com/adityapk00/zecwallet-light-cli/releases/download/v${zcashCliVersion}/linux-zecwallet-cli-v${zcashCliVersion}.zip -O /tmp/zecwallet.zip
unzip /tmp/zecwallet.zip -d /home/ubuntu/ZcashWallet
srm -r /tmp/zecwallet.zip
mv /home/ubuntu/ZcashWallet/linux-zecwallet-cli-v${zcashCliVersion}/zecwallet-cli /home/ubuntu/ZcashWallet/
srm -r /home/ubuntu/ZcashWallet/linux-zecwallet-cli-v${zcashCliVersion}
su - ubuntu -c "/home/ubuntu/ZcashWallet/zecwallet-cli encrypt ${zcashEncKey}"
su - ubuntu -c "/home/ubuntu/ZcashWallet/zecwallet-cli save"
