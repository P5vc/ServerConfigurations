webserverNum=$(hostname)
webserverNum=${webserverNum:9}

if [ "$serverGeneration" == "Duplicate" ]
then
	if [ ! -e "/root/secrets" ]
	then
		echo -e "\n\nError: '/root/secrets' was not found.\nPlease copy-over this directory from webserver0 befor continuing."
		exit 404
	fi
fi

# system
touch /root/TODO
mkdir -p /root/secrets
touch /root/secrets/ws${webserverNum}Secrets.txt

# apt
apt-get update
apt-get upgrade -y
apt-get install python3-pip supervisor nginx opendkim opendkim-tools vnstat fail2ban rabbitmq-server apt-transport-https unzip jailkit -y

# pip3
pip3 install --upgrade pip
pip3 install virtualenv

# system
useradd -s /bin/bash -d /home/ubuntu -m -G sudo -p "" ubuntu || true
mkdir -p /home/ubuntu/.ssh

# jail
if [ "$serverGeneration" == "Duplicate" ]
then
	mkdir -p $jailDir
	mkdir -p ${jailDir}/VPN
	mkdir -p ${jailDir}/dev

	mknod -m 666 ${jailDir}/dev/null c 1 3
	mknod -m 666 ${jailDir}/dev/tty c 5 0
	mknod -m 666 ${jailDir}/dev/zero c 1 5
	mknod -m 666 ${jailDir}/dev/random c 1 8

	for program in $programsToCopy
	do
		cp --parents $program $jailDir
		cp --parents $(ldd $program | grep -v dynamic | cut -d " " -f 3 | sed "s/://" | sort | uniq) $jailDir
	done

	cp --parents /lib64/ld-linux-x86-64.so.2 $jailDir

	yes "" | adduser vpnservers --disabled-password

	mkdir -p /home/vpnservers/.ssh
	touch /home/vpnservers/.ssh/authorized_keys

	groupadd jailed
	adduser vpnservers jailed

	echo -e "\n\n -  Find the 'vpnservers' line in '/etc/passwd' and change it to\nthe following: 'vpnservers:x:1001:1001:vpnservers:/home/jail/./home/vpnservers:/bin/bash'.\nNote: Use the same user/group ids that were in the original line.\nIn other words, replace '1001' with the numbers that were\nalready in the file on th vpnservers line." >> /root/TODO
fi

# sshd
ssh-keygen -t ed25519 -a 256 -f /root/secrets/${serverHostname} -N ""
cat /root/secrets/${serverHostname}.pub >> /home/ubuntu/.ssh/authorized_keys
rm /root/secrets/${serverHostname}.pub

if [ "$serverGeneration" == "Duplicate" ]
then
	ssh-keygen -t ed25519 -a 256 -f /root/secrets/vpnservers -N ""
	cat /root/secrets/vpnservers.pub >> /home/vpnservers/.ssh/authorized_keys
	rm /root/secrets/vpnservers.pub
fi

# TODO
echo -e " -  Copy '/root/secrets' directory to secured, separate drive.\nThe '${serverHostname}' file contains the private key needed to SSH\nback into the server.\n\n" >> /root/TODO

# postfix
debconf-set-selections <<< "postfix postfix/mailname string ${serverHostname}.${publicFQDN}"
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"

apt-get install postfix -y

# opendkim
adduser postfix opendkim

mkdir -p /etc/opendkim/keys
mkdir /etc/opendkim/keys/noreply.${publicFQDN}
mkdir /etc/opendkim/keys/fwd.${publicFQDN}
mkdir /etc/opendkim/keys/burn.${publicFQDN}
mkdir /var/spool/postfix/opendkim

if [ "$serverGeneration" == "Base" ]
then
	opendkim-genkey -b 4096 -d noreply.${publicFQDN} -D /etc/opendkim/keys/noreply.${publicFQDN} -s noreply -v
	opendkim-genkey -b 4096 -d fwd.${publicFQDN} -D /etc/opendkim/keys/fwd.${publicFQDN} -s fwd -v
	opendkim-genkey -b 4096 -d burn.${publicFQDN} -D /etc/opendkim/keys/burn.${publicFQDN} -s burn -v

	chown -R opendkim:opendkim /etc/opendkim
	chmod go-rw /etc/opendkim/keys
	chown opendkim:opendkim /etc/opendkim/keys/noreply.${publicFQDN}/noreply.private
	chown opendkim:opendkim /etc/opendkim/keys/fwd.${publicFQDN}/fwd.private
	chown opendkim:opendkim /etc/opendkim/keys/burn.${publicFQDN}/burn.private
	chown opendkim:postfix /var/spool/postfix/opendkim

	cp -R /etc/opendkim/keys /root/secrets/
else
	cp -R /root/secrets/keys /etc/opendkim/

	chown -R opendkim:opendkim /etc/opendkim
	chmod go-rw /etc/opendkim/keys
	chown opendkim:opendkim /etc/opendkim/keys/noreply.${publicFQDN}/noreply.private
	chown opendkim:opendkim /etc/opendkim/keys/fwd.${publicFQDN}/fwd.private
	chown opendkim:opendkim /etc/opendkim/keys/burn.${publicFQDN}/burn.private
	chown opendkim:postfix /var/spool/postfix/opendkim
fi

# TODO
if [ "$serverGeneration" == "Base" ]
then
	echo -e " -  Create DNS TXT records for the following keys:\n\n" >> /root/TODO
	cat /etc/opendkim/keys/noreply.${publicFQDN}/noreply.txt >> /root/TODO
	cat /etc/opendkim/keys/fwd.${publicFQDN}/fwd.txt >> /root/TODO
	cat /etc/opendkim/keys/burn.${publicFQDN}/burn.txt >> /root/TODO
fi

# postfix
touch /etc/postfix/virtual
postmap /etc/postfix/virtual

# dnscrypt
apt-get install dnscrypt-proxy -y
systemctl disable systemd-resolved

# systemctl
systemctl restart opendkim postfix

# system
cd /home/ubuntu

# virtualenv
virtualenv priveasyEnv
chown -R ubuntu:ubuntu priveasyEnv
source priveasyEnv/bin/activate

pip install django uwsgi psycopg2-binary celery django-environ django-kronos stripe twilio

deactivate

# django
git clone https://github.com/P5vc/WebserverBackend.git
cp -R WebserverBackend/* ./
rm -rf WebserverBackend

if [ "$serverGeneration" == "Base" ]
then
	djangoSecretKey=$(gpg --armor --gen-random 2 64)
	djangoSecretKey=${djangoSecretKey:0:64}
	echo "$djangoSecretKey" >> /root/secrets/ws0Secrets.txt
	echo "SECRET_KEY=${djangoSecretKey}" >> ./Priveasy/Priveasy/settings/.env
else
	djangoSecretKey=$(sed -n "1p" "/root/secrets/ws0Secrets.txt")
	echo "SECRET_KEY=${djangoSecretKey}" >> ./Priveasy/Priveasy/settings/.env
fi

echo "DJANGO_SETTINGS_MODULE=Priveasy.settings.pro" >> /etc/environment
export DJANGO_SETTINGS_MODULE=Priveasy.settings.pro

dbPass=$(sed -n "1p" "/root/secrets/db0Secrets.txt")
echo "DATABASE_PASSWORD=${dbPass}" >> ./Priveasy/Priveasy/settings/.env

echo -e "\n\n -  Insert the correct Twilio and Stripe keys in /home/ubuntu/Priveasy/Priveasy/settings/.env" >> /root/TODO

echo "SERVER_GENERATION=${serverGeneration}" >> ./Priveasy/Priveasy/settings/.env

chown -R ubuntu:ubuntu Priveasy

ln -s /home/ubuntu/Priveasy/config/nginx.conf /etc/nginx/sites-enabled/Priveasy.conf

pythonVersion=$(ls /home/ubuntu/priveasyEnv/lib/)
sed "s/    def scheme(self):/    def scheme(self):\n        ### START OF MODIFIED LINES ###\n        if (self.get_host() in settings.HOST_SCHEME_ALWAYS_HTTPS):\n            return 'https'\n        ### END OF MODIFIED LINES ###/1" /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py > /tmp/request.py
mv /tmp/request.py /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py

source priveasyEnv/bin/activate

python -m pip install django[argon2]

deactivate

echo -e "\n\n -  Run\n'source /home/ubuntu/priveasyEnv/bin/activate && python /home/ubuntu/Priveasy/manage.py makemigrations && python /home/ubuntu/Priveasy/manage.py migrate && python /home/ubuntu/Priveasy/manage.py collectstatic && python /home/ubuntu/Priveasy/manage.py installtasks'\nif this is the very first time you are setting-up the server...\nIf the database is already populated, then add the '--fake-initial' argument to the migrate command, as such: 'python /home/ubuntu/Priveasy/manage.py migrate --fake-initial'" >> /root/TODO
echo -e "\n\n -  If you are using a new database, that doesn't already have\na superuser account on record, run 'source /home/ubuntu/priveasyEnv/bin/activate && python /home/ubuntu/Priveasy/manage.py createsuperuser',\nthen follow the steps to create a superuser account, and save the\ncredentials to the /root/ws0Secrets.txt file." >> /root/TODO

# Zcash
zcashEncKey=$(gpg --armor --gen-random 2 64)
zcashEncKey=${zcashEncKey:0:64}
echo "$zcashEncKey" >> /root/secrets/ws${webserverNum}Secrets.txt
echo "ZCASH_WALLET_ENCRYPTION_KEY=${zcashEncKey}" >> /home/ubuntu/Priveasy/Priveasy/settings/.env

cd /home/ubuntu

echo -e "\n\nIn order to properly configure this server, the latest version\nof zecwallet-light-cli must be known (https://github.com/adityapk00/zecwallet-light-cli/releases).\nPlease enter the current version number (i.e. 1.4.1).\n\nVersion Number: "
read zcashCliVersion </dev/tty

wget https://github.com/adityapk00/zecwallet-light-cli/releases/download/v${zcashCliVersion}/linux-zecwallet-cli-v${zcashCliVersion}.zip
unzip linux-zecwallet-cli-v${zcashCliVersion}.zip
rm linux-zecwallet-cli-v${zcashCliVersion}.zip
mv linux-zecwallet-cli-v${zcashCliVersion} Zcash
cd /home/ubuntu/Zcash
./zecwallet-cli encrypt $zcashEncKey
./zecwallet-cli save

# certbot
if [ "$serverGeneration" == "Base" ]
then
	apt-get install software-properties-common -y
	add-apt-repository universe
	apt-get update
	apt-get install certbot python3-certbot-nginx -y
fi

# TODO
if [ "$serverGeneration" == "Base" ]
then
	echo -e "\n\n -  Run 'sudo certbot --nginx' and follow the prompts." >> /root/TODO
fi

# ufw
ufw allow 22
ufw allow 80
ufw allow 443
ufw allow 58763
ufw allow 25
ufw allow 587
yes | ufw enable || true

# uwsgi
mkdir -p /var/log/uwsgi/
touch /var/log/uwsgi/uwsgi.log

# supervisor
mkdir -p /var/log/celery/
touch /var/log/celery/worker.log

# rabbitmq
systemctl enable rabbitmq-server

# tor
cd /var
mkdir tor
chown ubuntu:ubuntu tor
chmod 660 tor
cd /home/ubuntu
mkdir hiddenService
chmod 700 hiddenService

curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import && gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -

# TODO
echo -e "\n\n -  Copy-over the appropriate key files to /home/ubuntu/hiddenService" >> /root/TODO

# openssl
yes "" | openssl req -x509 -nodes -days 1 -newkey rsa:2048 -keyout /etc/ssl/private/tempKey.key -out /etc/ssl/private/tempCert.crt || true

# TODO
if [ "$serverGeneration" == "Base" ]
then
	echo -e "\n\n -  After you save the secrets directory to a separate\ndrive and remove the secrets directory entirely,\n run 'sudo ufw delete allow 22'.\nThis will now block the standard SSH port (as a\nnon-standard port will now be used by default)." >> /root/TODO
else
	echo -e "\n\n -  After you save the secrets directory to a separate\nremove everything in the secrets directory except for the key to SSH into webserver0\nthen run 'sudo ufw delete allow 22'.\nThis will now block the standard SSH port (as a\nnon-standard port will now be used by default)." >> /root/TODO
fi
echo -e "\n\n -  REBOOT THE SERVER" >> /root/TODO
