# system
mkdir -p /root/WebserverSecrets
touch /root/WebserverSecrets/secrets.txt


# netfilter
if [ -n "$(which netfilter-persistent)" ]
then
	systemctl disable netfilter-persistent
fi


# apt
apt-get update
apt-get upgrade -y
apt-get install python3-pip supervisor nginx opendkim opendkim-tools vnstat fail2ban rabbitmq-server apt-transport-https unzip jailkit wget curl nano -y


# pip3
pip3 install --upgrade pip
pip3 install virtualenv


# system
useradd -s /bin/bash -d /home/ubuntu -m -G sudo -p "" ubuntu || true
mkdir -p /home/ubuntu/.ssh


# jail
mkdir -p $jailDir
mkdir -p ${jailDir}/VPN
mkdir -p ${jailDir}/dev
mkdir -p ${jailDir}/etc

mknod -m 666 ${jailDir}/dev/null c 1 3
mknod -m 666 ${jailDir}/dev/tty c 5 0
mknod -m 666 ${jailDir}/dev/zero c 1 5
mknod -m 666 ${jailDir}/dev/random c 1 8

for program in $programsToCopy
do
	cp --parents $program $jailDir
	cp --parents $(ldd $program | grep -v dynamic | cut -d " " -f 3 | sed "s/://" | sort | uniq) $jailDir
done

cp --parents /lib64/ld-linux-x86-64.so.2 $jailDir

cp /lib/x86_64-linux-gnu/libnss_files.so.2 ${jailDir}/lib/x86_64-linux-gnu

yes "" | adduser vpnservers --disabled-password || true

mkdir -p /home/vpnservers/.ssh
touch /home/vpnservers/.ssh/authorized_keys

groupadd jailed
adduser vpnservers jailed

cat /etc/passwd | grep "vpnservers" > /home/jail/etc/passwd
cat /etc/group | grep "vpnservers" > /home/jail/etc/group
cat /etc/group | grep "jailed" >> /home/jail/etc/group


# sshd
ssh-keygen -t ed25519 -a 256 -f /root/WebserverSecrets/${serverHostname} -N ""
cat /root/WebserverSecrets/${serverHostname}.pub >> /home/ubuntu/.ssh/authorized_keys
rm /root/WebserverSecrets/${serverHostname}.pub

ssh-keygen -t ed25519 -a 256 -f /root/WebserverSecrets/vpnservers -N ""
cat /root/WebserverSecrets/vpnservers.pub >> /home/vpnservers/.ssh/authorized_keys
rm /root/WebserverSecrets/vpnservers.pub


# postfix
debconf-set-selections <<< "postfix postfix/mailname string ${serverHostname}.${publicFQDN}"
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"

apt-get install postfix -y


# opendkim
adduser postfix opendkim

mkdir -p /etc/opendkim/keys
mkdir /etc/opendkim/keys/noreply.${publicFQDN}
mkdir /etc/opendkim/keys/fwd.${publicFQDN}
mkdir /etc/opendkim/keys/burn.${publicFQDN}
mkdir /var/spool/postfix/opendkim

opendkim-genkey -b 2048 -d noreply.${publicFQDN} -D /etc/opendkim/keys/noreply.${publicFQDN} -s noreply -v
opendkim-genkey -b 2048 -d fwd.${publicFQDN} -D /etc/opendkim/keys/fwd.${publicFQDN} -s fwd -v
opendkim-genkey -b 2048 -d burn.${publicFQDN} -D /etc/opendkim/keys/burn.${publicFQDN} -s burn -v

chown -R opendkim:opendkim /etc/opendkim
chmod go-rw /etc/opendkim/keys
chown opendkim:opendkim /etc/opendkim/keys/noreply.${publicFQDN}/noreply.private
chown opendkim:opendkim /etc/opendkim/keys/fwd.${publicFQDN}/fwd.private
chown opendkim:opendkim /etc/opendkim/keys/burn.${publicFQDN}/burn.private
chown opendkim:postfix /var/spool/postfix/opendkim

cp -R /etc/opendkim/keys /root/WebserverSecrets/


# postfix
touch /etc/postfix/virtual
postmap /etc/postfix/virtual


# systemctl
systemctl restart opendkim postfix


# system
cd /home/ubuntu


# virtualenv
virtualenv priveasyEnv
chown -R ubuntu:ubuntu priveasyEnv
source priveasyEnv/bin/activate

pip install django uwsgi psycopg2-binary celery django-environ stripe twilio

deactivate


# django
git clone https://github.com/P5vc/PriveasyWebserverBackend.git
cp -R PriveasyWebserverBackend/* ./
rm -rf PriveasyWebserverBackend

djangoSecretKey=$(gpg --armor --gen-random 2 64)
djangoSecretKey=${djangoSecretKey:0:64}
echo "$djangoSecretKey" >> /root/WebserverSecrets/secrets.txt
echo "SECRET_KEY=${djangoSecretKey}" >> ./Priveasy/Priveasy/settings/.env

echo "DJANGO_SETTINGS_MODULE=Priveasy.settings.pro" >> /etc/environment
export DJANGO_SETTINGS_MODULE=Priveasy.settings.pro

chown -R ubuntu:ubuntu Priveasy

ln -s /home/ubuntu/Priveasy/config/nginx.conf /etc/nginx/sites-enabled/Priveasy.conf


# Modify Django Library Files To Support Tor:
pythonVersion=$(ls /home/ubuntu/priveasyEnv/lib/)

sed "s/    def scheme(self):/    def scheme(self):\n        ### START OF MODIFIED LINES ###\n        if (self.get_host() in settings.HOST_SCHEME_ALWAYS_HTTPS):\n            return 'https'\n        ### END OF MODIFIED LINES ###/1" /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py > /tmp/request.py
mv /tmp/request.py /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/http/request.py

sed "s/return self._reject(request, REASON_INSECURE_REFERER)/### START OF MODIFIED LINES ###\n                    if (not(referer.netloc in settings.HOST_SCHEME_ALWAYS_HTTPS)):\n                        return self._reject(request, REASON_INSECURE_REFERER)\n                    ### END OF MODIFIED LINES###/1" /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/middleware/csrf.py > /tmp/csrf.py
mv /tmp/csrf.py /home/ubuntu/priveasyEnv/lib/${pythonVersion}/site-packages/django/middleware/csrf.py


# pip
source priveasyEnv/bin/activate

python -m pip install django[argon2]

deactivate


# Zcash
zcashEncKey=$(gpg --armor --gen-random 2 64)
zcashEncKey=${zcashEncKey:0:64}
echo "$zcashEncKey" >> /root/WebserverSecrets/secrets.txt
echo "ZCASH_WALLET_ENCRYPTION_KEY=${zcashEncKey}" >> /home/ubuntu/Priveasy/Priveasy/settings/.env

cd /home/ubuntu

echo -e "\n\nIn order to properly configure this server, the latest version\nof zecwallet-light-cli must be known (https://github.com/adityapk00/zecwallet-light-cli/releases).\nPlease enter the current version number (i.e. 1.5.2).\n\nVersion Number: "
read zcashCliVersion </dev/tty

wget https://github.com/adityapk00/zecwallet-light-cli/releases/download/v${zcashCliVersion}/linux-zecwallet-cli-v${zcashCliVersion}.zip
unzip linux-zecwallet-cli-v${zcashCliVersion}.zip
rm linux-zecwallet-cli-v${zcashCliVersion}.zip
mv linux-zecwallet-cli-v${zcashCliVersion} Zcash
cd /home/ubuntu/Zcash
./zecwallet-cli encrypt $zcashEncKey
./zecwallet-cli save


# postgres
sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

apt update
apt install postgresql

echo "password_encryption = scram-sha-256" >> /etc/postgresql/13/main/postgresql.conf
systemctl restart postgresql

priveasyuserPass=$(gpg --armor --gen-random 2 64)
priveasyuserPass=${priveasyuserPass:0:64}
echo "$priveasyuserPass" >> /root/WebserverSecrets/secrets.txt
echo "DATABASE_PASSWORD=${priveasyuserPass}" >> /home/ubuntu/Priveasy/Priveasy/settings/.env

sudo -u postgres psql -c "CREATE DATABASE priveasydb;"
sudo -u postgres psql -c "CREATE USER priveasyuser WITH LOGIN PASSWORD '${priveasyuserPass}';"
sudo -u postgres psql -c "ALTER ROLE priveasyuser SET client_encoding TO 'utf8';"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE priveasydb TO priveasyuser;"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO priveasyuser;"


# certbot
apt-get install software-properties-common -y
add-apt-repository universe
apt-get update
apt-get install certbot python3-certbot-nginx -y

certbot --nginx


# ufw
ufw allow 22
ufw allow 80
ufw allow 443
ufw allow 58763
ufw allow 25
ufw allow 587
yes | ufw enable || true


# uwsgi
mkdir -p /var/log/uwsgi/
touch /var/log/uwsgi/uwsgi.log


# supervisor
mkdir -p /var/log/celery/
touch /var/log/celery/worker.log


# rabbitmq
systemctl enable rabbitmq-server


# tor
cd /var
mkdir tor
chown ubuntu:ubuntu tor
chmod 660 tor
cd /home/ubuntu
mkdir hiddenService
chmod 700 hiddenService

curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import && gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -


# openssl
yes "" | openssl req -x509 -nodes -days 1 -newkey rsa:2048 -keyout /etc/ssl/private/tempKey.key -out /etc/ssl/private/tempCert.crt || true
